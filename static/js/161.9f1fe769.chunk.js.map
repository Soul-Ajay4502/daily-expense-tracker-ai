{"version":3,"file":"static/js/161.9f1fe769.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/ArrowBack.js","components/Auth/Signup.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20z\"\n}), 'ArrowBack');","import React, { useState } from 'react';\r\nimport { auth, db } from '../../firebase';\r\nimport { GoogleAuthProvider, signInWithPopup, createUserWithEmailAndPassword } from \"firebase/auth\";\r\nimport { doc, setDoc } from \"firebase/firestore\";\r\nimport { Formik, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Button, TextField, Container, Typography, Box, IconButton, CircularProgress } from '@mui/material';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Validation schema using Yup\r\nconst validationSchema = Yup.object({\r\n  fullName: Yup.string()\r\n    .matches(/^[A-Za-z\\s'-]+$/, \"Full Name can only contain letters, spaces, hyphens, and apostrophes\")\r\n    .required('Full Name is required'),\r\n  email: Yup.string()\r\n    .email('Invalid email address')\r\n    .required('Email is required'),\r\n  profession: Yup.string()\r\n    .matches(/^[A-Za-z\\s'-]+$/, \"Profession can only contain letters, spaces, hyphens, and apostrophes\")\r\n    .required('Profession is required'),\r\n  password: Yup.string()\r\n    .min(6, 'Password must be at least 6 characters')\r\n    .required('Password is required'),\r\n});\r\n\r\nconst Signup = () => {\r\n  const [loading, setLoading] = useState(false); // Loading state\r\n  const navigate = useNavigate(); // For navigating back\r\n\r\n  const handleRegister = async (values, { resetForm }) => {\r\n    const { fullName, email, profession, password } = values;\r\n    setLoading(true); // Set loading to true\r\n    try {\r\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n      const user = userCredential.user;\r\n\r\n      await setDoc(doc(db, \"users\", user.uid), {\r\n        fullName,\r\n        email,\r\n        profession,\r\n      });\r\n\r\n      // Reset form\r\n      resetForm();\r\n      alert('User registered successfully!');\r\n    } catch (error) {\r\n      console.error(\"Error registering user:\", error);\r\n      alert(error.message);\r\n    } finally {\r\n      setLoading(false); // Reset loading state\r\n    }\r\n  };\r\n\r\n  const handleGoogleSignIn = async () => {\r\n    const provider = new GoogleAuthProvider();\r\n    setLoading(true); // Set loading to true\r\n    try {\r\n      const result = await signInWithPopup(auth, provider);\r\n      const user = result.user;\r\n\r\n      // Store user details in Firestore if needed\r\n      await setDoc(doc(db, \"users\", user.uid), {\r\n        fullName: user.displayName,\r\n        email: user.email,\r\n        profession: \"Not specified\" // Placeholder for profession\r\n      }, { merge: true });\r\n      alert('User signed in with Google!');\r\n    } catch (error) {\r\n      console.error(\"Error during Google sign-in:\", error);\r\n      alert(error.message);\r\n    } finally {\r\n      setLoading(false); // Reset loading state\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      <Box sx={{ mt: 2, display: 'flex', alignItems: 'center' }}>\r\n        {/* Back Button */}\r\n        <IconButton onClick={() => navigate(-1)} edge=\"start\">\r\n          <ArrowBackIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h4\" sx={{ flexGrow: 1, textAlign: 'center' }}>\r\n          Register\r\n        </Typography>\r\n      </Box>\r\n      <Box sx={{ mt: 2 }}>\r\n        <Formik\r\n          initialValues={{ fullName: '', email: '', profession: '', password: '' }}\r\n          validationSchema={validationSchema}\r\n          onSubmit={handleRegister}\r\n        >\r\n          {({ handleSubmit, handleChange, values }) => (\r\n            <Form onSubmit={handleSubmit}>\r\n              <Box sx={{ mb: 2 }}>\r\n                <TextField\r\n                  label=\"Full Name\"\r\n                  name=\"fullName\"\r\n                  fullWidth\r\n                  value={values.fullName}\r\n                  onChange={handleChange}\r\n                  error={!!values.fullName && !validationSchema.isValidSync({ fullName: values.fullName })}\r\n                />\r\n                <ErrorMessage name=\"fullName\" component=\"div\" style={{ color: 'red' }} />\r\n              </Box>\r\n              <Box sx={{ mb: 2 }}>\r\n                <TextField\r\n                  label=\"Email\"\r\n                  name=\"email\"\r\n                  fullWidth\r\n                  value={values.email}\r\n                  onChange={handleChange}\r\n                  error={!!values.email && !validationSchema.isValidSync({ email: values.email })}\r\n                />\r\n                <ErrorMessage name=\"email\" component=\"div\" style={{ color: 'red' }} />\r\n              </Box>\r\n              <Box sx={{ mb: 2 }}>\r\n                <TextField\r\n                  label=\"Profession\"\r\n                  name=\"profession\"\r\n                  fullWidth\r\n                  value={values.profession}\r\n                  onChange={handleChange}\r\n                  error={!!values.profession && !validationSchema.isValidSync({ profession: values.profession })}\r\n                />\r\n                <ErrorMessage name=\"profession\" component=\"div\" style={{ color: 'red' }} />\r\n              </Box>\r\n              <Box sx={{ mb: 2 }}>\r\n                <TextField\r\n                  label=\"Password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  fullWidth\r\n                  value={values.password}\r\n                  onChange={handleChange}\r\n                  error={!!values.password && !validationSchema.isValidSync({ password: values.password })}\r\n                />\r\n                <ErrorMessage name=\"password\" component=\"div\" style={{ color: 'red' }} />\r\n              </Box>\r\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth disabled={loading}>\r\n                {loading ? <CircularProgress size={24} /> : 'Register'}\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n        <Box sx={{ mt: 2 }}>\r\n          <Button variant=\"outlined\" color=\"secondary\" fullWidth onClick={handleGoogleSignIn} disabled={loading}>\r\n            Sign in with Google\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n"],"names":["createSvgIcon","_jsx","d","validationSchema","Yup","fullName","matches","required","email","profession","password","min","Signup","loading","setLoading","useState","navigate","useNavigate","_jsxs","Container","maxWidth","children","Box","sx","mt","display","alignItems","IconButton","onClick","edge","ArrowBackIcon","Typography","variant","flexGrow","textAlign","Formik","initialValues","onSubmit","async","values","_ref","resetForm","user","createUserWithEmailAndPassword","auth","setDoc","doc","db","uid","alert","error","console","message","_ref2","handleSubmit","handleChange","Form","mb","TextField","label","name","fullWidth","value","onChange","isValidSync","ErrorMessage","component","style","color","type","Button","disabled","CircularProgress","size","provider","GoogleAuthProvider","signInWithPopup","displayName","merge"],"sourceRoot":""}