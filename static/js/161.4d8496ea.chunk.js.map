{"version":3,"file":"static/js/161.4d8496ea.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/ArrowBack.js","components/Auth/Signup.js","../node_modules/@mui/icons-material/esm/Visibility.js","../node_modules/@mui/icons-material/esm/VisibilityOff.js","../node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js","../node_modules/@mui/material/InputAdornment/InputAdornment.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20z\"\n}), 'ArrowBack');","import React, { useState } from \"react\";\r\nimport { auth, db } from \"../../firebase\";\r\nimport {\r\n    GoogleAuthProvider,\r\n    signInWithPopup,\r\n    createUserWithEmailAndPassword,\r\n} from \"firebase/auth\";\r\nimport { doc, setDoc } from \"firebase/firestore\";\r\nimport { Formik, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Container,\r\n    Typography,\r\n    Box,\r\n    IconButton,\r\n    CircularProgress,\r\n    InputAdornment,\r\n} from \"@mui/material\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport Visibility from \"@mui/icons-material/Visibility\";\r\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst validationSchema = Yup.object({\r\n    fullName: Yup.string()\r\n        .matches(\r\n            /^[A-Za-z\\s'-]+$/,\r\n            \"Full Name can only contain letters, spaces, hyphens, and apostrophes\"\r\n        )\r\n        .required(\"Full Name is required\"),\r\n    email: Yup.string()\r\n        .email(\"Invalid email address\")\r\n        .required(\"Email is required\"),\r\n    profession: Yup.string()\r\n        .matches(\r\n            /^[A-Za-z\\s'-]+$/,\r\n            \"Profession can only contain letters, spaces, hyphens, and apostrophes\"\r\n        )\r\n        .required(\"Profession is required\"),\r\n    password: Yup.string()\r\n        .min(6, \"Password must be at least 6 characters\")\r\n        .required(\"Password is required\"),\r\n    confirmPassword: Yup.string()\r\n        .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n        .required(\"Confirm Password is required\"),\r\n});\r\n\r\nconst Signup = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [showPassword, setShowPassword] = useState(false); // State for toggling password visibility\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false); // State for confirming password visibility\r\n    const navigate = useNavigate();\r\n\r\n    const handleRegister = async (values, { resetForm }) => {\r\n        const { fullName, email, profession, password } = values;\r\n        setLoading(true);\r\n        try {\r\n            const userCredential = await createUserWithEmailAndPassword(\r\n                auth,\r\n                email,\r\n                password\r\n            );\r\n            const user = userCredential.user;\r\n\r\n            await setDoc(doc(db, \"users\", user.uid), {\r\n                fullName,\r\n                email,\r\n                profession,\r\n            });\r\n\r\n            resetForm();\r\n            alert(\"User registered successfully!\");\r\n        } catch (error) {\r\n            console.error(\"Error registering user:\", error);\r\n            alert(error.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleGoogleSignIn = async () => {\r\n        const provider = new GoogleAuthProvider();\r\n        setLoading(true);\r\n        try {\r\n            const result = await signInWithPopup(auth, provider);\r\n            const user = result.user;\r\n\r\n            await setDoc(\r\n                doc(db, \"users\", user.uid),\r\n                {\r\n                    fullName: user.displayName,\r\n                    email: user.email,\r\n                    profession: \"Not specified\",\r\n                },\r\n                { merge: true }\r\n            );\r\n            alert(\"User signed in with Google!\");\r\n        } catch (error) {\r\n            console.error(\"Error during Google sign-in:\", error);\r\n            alert(error.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\">\r\n            <Box sx={{ mt: 2, display: \"flex\", alignItems: \"center\" }}>\r\n                <IconButton onClick={() => navigate(-1)} edge=\"start\">\r\n                    <ArrowBackIcon />\r\n                </IconButton>\r\n                <Typography\r\n                    variant=\"h4\"\r\n                    sx={{ flexGrow: 1, textAlign: \"center\" }}\r\n                >\r\n                    Register\r\n                </Typography>\r\n            </Box>\r\n            <Box sx={{ mt: 2 }}>\r\n                <Formik\r\n                    initialValues={{\r\n                        fullName: \"\",\r\n                        email: \"\",\r\n                        profession: \"\",\r\n                        password: \"\",\r\n                        confirmPassword: \"\",\r\n                    }}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={handleRegister}\r\n                >\r\n                    {({ handleSubmit, handleChange, values }) => (\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Box sx={{ mb: 2 }}>\r\n                                <TextField\r\n                                    label=\"Full Name\"\r\n                                    name=\"fullName\"\r\n                                    fullWidth\r\n                                    value={values.fullName}\r\n                                    onChange={handleChange}\r\n                                    error={\r\n                                        !!values.fullName &&\r\n                                        !validationSchema.isValidSync({\r\n                                            fullName: values.fullName,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <ErrorMessage\r\n                                    name=\"fullName\"\r\n                                    component=\"div\"\r\n                                    style={{ color: \"red\" }}\r\n                                />\r\n                            </Box>\r\n                            <Box sx={{ mb: 2 }}>\r\n                                <TextField\r\n                                    label=\"Email\"\r\n                                    name=\"email\"\r\n                                    fullWidth\r\n                                    value={values.email}\r\n                                    onChange={handleChange}\r\n                                    error={\r\n                                        !!values.email &&\r\n                                        !validationSchema.isValidSync({\r\n                                            email: values.email,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <ErrorMessage\r\n                                    name=\"email\"\r\n                                    component=\"div\"\r\n                                    style={{ color: \"red\" }}\r\n                                />\r\n                            </Box>\r\n                            <Box sx={{ mb: 2 }}>\r\n                                <TextField\r\n                                    label=\"Profession\"\r\n                                    name=\"profession\"\r\n                                    fullWidth\r\n                                    value={values.profession}\r\n                                    onChange={handleChange}\r\n                                    error={\r\n                                        !!values.profession &&\r\n                                        !validationSchema.isValidSync({\r\n                                            profession: values.profession,\r\n                                        })\r\n                                    }\r\n                                />\r\n                                <ErrorMessage\r\n                                    name=\"profession\"\r\n                                    component=\"div\"\r\n                                    style={{ color: \"red\" }}\r\n                                />\r\n                            </Box>\r\n                            <Box sx={{ mb: 2 }}>\r\n                                <TextField\r\n                                    label=\"Password\"\r\n                                    name=\"password\"\r\n                                    type={showPassword ? \"text\" : \"password\"} // Toggle password visibility\r\n                                    fullWidth\r\n                                    value={values.password}\r\n                                    onChange={handleChange}\r\n                                    error={\r\n                                        !!values.password &&\r\n                                        !validationSchema.isValidSync({\r\n                                            password: values.password,\r\n                                        })\r\n                                    }\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    onClick={() =>\r\n                                                        setShowPassword(\r\n                                                            !showPassword\r\n                                                        )\r\n                                                    }\r\n                                                    edge=\"end\"\r\n                                                >\r\n                                                    {showPassword ? (\r\n                                                        <VisibilityOff />\r\n                                                    ) : (\r\n                                                        <Visibility />\r\n                                                    )}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n                                <ErrorMessage\r\n                                    name=\"password\"\r\n                                    component=\"div\"\r\n                                    style={{ color: \"red\" }}\r\n                                />\r\n                            </Box>\r\n                            <Box sx={{ mb: 2 }}>\r\n                                <TextField\r\n                                    label=\"Confirm Password\"\r\n                                    name=\"confirmPassword\"\r\n                                    type={\r\n                                        showConfirmPassword\r\n                                            ? \"text\"\r\n                                            : \"password\"\r\n                                    } // Toggle confirm password visibility\r\n                                    fullWidth\r\n                                    value={values.confirmPassword}\r\n                                    onChange={handleChange}\r\n                                    error={\r\n                                        !!values.confirmPassword &&\r\n                                        !validationSchema.isValidSync({\r\n                                            confirmPassword:\r\n                                                values.confirmPassword,\r\n                                        })\r\n                                    }\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    onClick={() =>\r\n                                                        setShowConfirmPassword(\r\n                                                            !showConfirmPassword\r\n                                                        )\r\n                                                    }\r\n                                                    edge=\"end\"\r\n                                                >\r\n                                                    {showConfirmPassword ? (\r\n                                                        <VisibilityOff />\r\n                                                    ) : (\r\n                                                        <Visibility />\r\n                                                    )}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n                                <ErrorMessage\r\n                                    name=\"confirmPassword\"\r\n                                    component=\"div\"\r\n                                    style={{ color: \"red\" }}\r\n                                />\r\n                            </Box>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                fullWidth\r\n                                disabled={loading}\r\n                            >\r\n                                {loading ? (\r\n                                    <CircularProgress size={24} />\r\n                                ) : (\r\n                                    \"Register\"\r\n                                )}\r\n                            </Button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Box sx={{ mt: 2 }}>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        fullWidth\r\n                        onClick={handleGoogleSignIn}\r\n                        disabled={loading}\r\n                    >\r\n                        Sign in with Google\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Signup;\r\n","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5M12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5m0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3\"\n}), 'Visibility');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7M2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2m4.31-.78 3.15 3.15.02-.16c0-1.66-1.34-3-3-3z\"\n}), 'VisibilityOff');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getInputAdornmentUtilityClass(slot) {\n  return generateUtilityClass('MuiInputAdornment', slot);\n}\nconst inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);\nexport default inputAdornmentClasses;","'use client';\n\nvar _span;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from \"../utils/capitalize.js\";\nimport Typography from \"../Typography/index.js\";\nimport FormControlContext from \"../FormControl/FormControlContext.js\";\nimport useFormControl from \"../FormControl/useFormControl.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport inputAdornmentClasses, { getInputAdornmentUtilityClass } from \"./inputAdornmentClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePointerEvents,\n    hiddenLabel,\n    position,\n    size,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]\n  };\n  return composeClasses(slots, getInputAdornmentUtilityClass, classes);\n};\nconst InputAdornmentRoot = styled('div', {\n  name: 'MuiInputAdornment',\n  slot: 'Root',\n  overridesResolver\n})(memoTheme(({\n  theme\n}) => ({\n  display: 'flex',\n  maxHeight: '2em',\n  alignItems: 'center',\n  whiteSpace: 'nowrap',\n  color: (theme.vars || theme).palette.action.active,\n  variants: [{\n    props: {\n      variant: 'filled'\n    },\n    style: {\n      [`&.${inputAdornmentClasses.positionStart}&:not(.${inputAdornmentClasses.hiddenLabel})`]: {\n        marginTop: 16\n      }\n    }\n  }, {\n    props: {\n      position: 'start'\n    },\n    style: {\n      marginRight: 8\n    }\n  }, {\n    props: {\n      position: 'end'\n    },\n    style: {\n      marginLeft: 8\n    }\n  }, {\n    props: {\n      disablePointerEvents: true\n    },\n    style: {\n      pointerEvents: 'none'\n    }\n  }]\n})));\nconst InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiInputAdornment'\n  });\n  const {\n    children,\n    className,\n    component = 'div',\n    disablePointerEvents = false,\n    disableTypography = false,\n    position,\n    variant: variantProp,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl() || {};\n  let variant = variantProp;\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n  const ownerState = {\n    ...props,\n    hiddenLabel: muiFormControl.hiddenLabel,\n    size: muiFormControl.size,\n    disablePointerEvents,\n    position,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(InputAdornmentRoot, {\n      as: component,\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      ref: ref,\n      ...other,\n      children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/_jsx(Typography, {\n        color: \"textSecondary\",\n        children: children\n      }) : /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [position === 'start' ? (/* notranslate needed while Google Translate will not fix zero-width space issue */_span || (_span = /*#__PURE__*/_jsx(\"span\", {\n          className: \"notranslate\",\n          children: \"\\u200B\"\n        }))) : null, children]\n      })\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the `input` on click.\n   * @default false\n   */\n  disablePointerEvents: PropTypes.bool,\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['end', 'start']).isRequired,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default InputAdornment;"],"names":["createSvgIcon","_jsx","d","validationSchema","Yup","fullName","matches","required","email","profession","password","min","confirmPassword","oneOf","Signup","loading","setLoading","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","navigate","useNavigate","_jsxs","Container","maxWidth","children","Box","sx","mt","display","alignItems","IconButton","onClick","edge","ArrowBackIcon","Typography","variant","flexGrow","textAlign","Formik","initialValues","onSubmit","async","values","_ref","resetForm","user","createUserWithEmailAndPassword","auth","setDoc","doc","db","uid","alert","error","console","message","_ref2","handleSubmit","handleChange","Form","mb","TextField","label","name","fullWidth","value","onChange","isValidSync","ErrorMessage","component","style","color","type","InputProps","endAdornment","InputAdornment","position","VisibilityOff","Visibility","Button","disabled","CircularProgress","size","provider","GoogleAuthProvider","signInWithPopup","displayName","merge","getInputAdornmentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_span","InputAdornmentRoot","styled","overridesResolver","props","styles","ownerState","root","capitalize","disablePointerEvents","memoTheme","theme","maxHeight","whiteSpace","vars","palette","action","active","variants","inputAdornmentClasses","positionStart","hiddenLabel","marginTop","marginRight","marginLeft","pointerEvents","React","inProps","ref","useDefaultProps","className","disableTypography","variantProp","other","muiFormControl","useFormControl","classes","slots","composeClasses","useUtilityClasses","FormControlContext","Provider","as","clsx"],"sourceRoot":""}